import express from 'express';
const router = express.Router();
import Text from '../models/Text.js';
import authMiddleware from "../middleware/authMiddleware.js";
import tokenExistsMiddleware from "../middleware/tokenExistsMiddleware.js";
import mongoose from "mongoose";

// Delete document based on the id (documentID)
router.delete("/:id", authMiddleware, async (req, res) => {
    try {
        const { id } = req.params;

        const user = req.user;

        if (!id) {
            return res.status(400).json({ message: "ID textu musí byť zadané." });
        }

        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({ message: "Neplatné ID textu." });
        }

        const textToBeDeleted = await Text.findById(id);

        if (textToBeDeleted) {
            if (!textToBeDeleted.uploadedBy || textToBeDeleted.uploadedBy.toString() !== user.id) {
                return res.status(401).json({message: "Nemáte opravnenie vymazať tento text."});
            }
        } else {
            return res.status(404).json({ message: "Text nebol nájdený." });
        }

        await Text.findByIdAndDelete(id);

        res.json({ message: "Dokument bol úspešne vymazaný." });
    } catch (error) {
        console.error("Chyba pri mazaní dokumentu:", error);
        res.status(500).json({ message: "Chyba servera." });
    }
});

// Update document
router.put("/:id", authMiddleware, async (req, res) => {
    try {
        const { id } = req.params;
        const { name, description, language, country, year, document, source, author } = req.body;

        if (!id) {
            return res.status(400).json({ message: "ID kľúča musí byť zadané." });
        }

        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({ message: "Neplatné ID kľúča." });
        }

        if (!document) {
            return res.status(400).json({ message: "Dokument nesmie byť prázdny." });
        }

        const updatedDoc = await Text.findByIdAndUpdate(
            id,
            {  name: name, description: description, language: language, country: country, year: year, source: source, author: author, document: document },
        { new: true}
        );


        if (!updatedDoc) {
            return res.status(404).json({ message: "Dokument nenájdený." });
        }

        res.json({ message: "Dokument bol úspešne zmenený." });
    } catch (error) {
        console.error("Chyba pri upravovaní dokumentu:", error);
        res.status(500).json({ message: "Chyba servera." });
    }
});

router.post('/', tokenExistsMiddleware, async (req, res) => {
    try {

        const { document, name, description, language, country, year, source, author, createdAt } = req.body;

        // Check if 'key' exists and is an array
        if (!document  || typeof document != 'string') {
            //console.log('Invalid data format:', document ); // Log invalid format
            return res.status(400).json({ error: 'Invalid key format. Expecting an array of strings.' });
        }

        const uploadedBy = req.user ? req.user.id : null;

        // Save the key to the database
        const newDocument = new Text({ document, name, description, language, country, year, source, author, createdAt, uploadedBy });

        const savedDocument = await newDocument.save(); // Await saving the document
        //console.log('New document saved to MongoDB:', savedDocument); // Log saved document
        res.status(201).json(savedDocument); // Send a response with the created document
    } catch (err) {
        console.error('Error during document creation:', err.message); // Log the error message
        res.status(500).json({ error: 'Server error: ' + err.message });
    }
});

router.get('/', tokenExistsMiddleware, async (req, res) => {
    try {
        const documents = await Text.find();
        const userId = req.user ? req.user.id : null;

        res.json({userId, documents});
    } catch (err) {
        res.status(500).send('Server error');
    }
});


router.post('/insertMany', async (req, res) => {
    try {

        for (let i = 0; i < 500; i++) {
            const newDocument = new Text({ document: "#111#756#748#54 #824'#261#596#300 #799#32#813#728#393#596#365#393 #75#393#546#32#300 #565#861#32#72 #813#233#54#365#32#75#300#561 #813#300#54 #561é#365#393#546#75#393#54 #72é#708#525#561#253#300#54, #261#596 #253#126#596#813#604#75 #522 é#75é #292#561#521#565#525#54é #292#756#261#561 #50 #340#300#54 #340#861#728#54 #521#970#54#861#919è#75#393#54 #907#261#233 #393#546#75#748#503#470#300#596#75 #919#393 #292#561#521#956#561è#54. #438#300#54 #565#604#72#75#233#365#233#292#799#546#75#54 #525#596#75 #393#257#292#561#728#253é #32#546 #813é#54#728#748 #522#748#824#300#596#75 #813#300 #961 #32#596#300 #54#756#365#728é#75é #565#111#261#54 #394 #393#75 é#649#261#233#75#799#860#919#300, #525ù #365#908#799#907#261#393 #365#908#525#54#393 #799 #54#799 #565#111#503#365#300. #32#596#300 #799#919#75#300#72#546#604#75#728#470#300 #522 é#75é #54#261#929#447é#72é#300 #565#521#32#72 #737 #111#393#54 #561#261#300#54 #813#393 #253#126#546#728è#72#300 é#365#114#438#861#651#459#907#261#300, #300#596 #919#503#596ç#522#596#75 #824#393#54 #292#72#525#690#300#75#54 #813#300 #292#111#604#546#75#503#75#233#114#596 #824'#503#72#437#748#300#54. #261#596 #824#393#54 #233#596#75#300#748#149#393#546#522#546#75#54 #799 #33#561#604#292#565é #919#300 #292#521#824#728#32#253 #565#114#261#748 #54#114#261#919#728#651#596#393#72 #340'#459#253#292#521#561#75#503#596#365#393 #813#300 #365#300#75#75#393 #812#546#233#75#812#799#75#728#470#393, #393#546 #253#393#596#75#728#525#546#596#799#546#75 #649#261'#233#111 #365#561#114#51#799#459#75 #33#300#561#253#393#253#393#546#75 #482#32#393 #365#908#799#365#32#596 #292#300#32#75 #365#756#546#75#561#459#860#261#393#561 à #365#908#503#546#447#300#561 #919#393#54 #365#908#861#54#300#54. #393#596 #708#728#546 #813#393 #365#521#253#292#75#300, #812#340 #300#54#75 #365#340#522#728#72 #907#261#393 #596#756#75#561#393 #393#596#956#799#447#393#253#300#596#75 #365#114#438#919#393#365#75#459#708 #393#54#75 #18 #292#521#261#748 #340'#126#149#300#596#728#748 #393#75 #482#32'#32#546#393 #253#861#437#812#919#812#54#503#75#459#756#546 #365#756#596#54#75#604#546#75#393 #393#54#75 #596é#365#393#54#54#799#233#748#393 #292#756#32#561 #708#604#728#72#300 #522#180#503#596#365#300#72 #365#300#54 #459#813é#393#54 #1000 #111#756#748#54 #824'#261#596#300 #799#32#813#728#393#596#365#393 #75#393#546#32#300 #565#861#32#72 #813#233#54#365#32#75#300#561 #813#300#54 #561é#365#393#546#75#393#54 #72é#708#525#561#253#300#54, #261#596 #253#126#596#813#604#75 #522 é#75é #292#561#521#565#525#54é #292#756#261#561 #50 #340#300#54 #340#861#728#54 #521#970#54#861#919è#75#393#54 #907#261#233 #393#546#75#748#503#470#300#596#75 #919#393 #292#561#521#956#561è#54. #438#300#54 #565#604#72#75#233#365#233#292#799#546#75#54 #525#596#75 #393#257#292#561#728#253é #32#546 #813é#54#728#748 #522#748#824#300#596#75 #813#300 #961 #32#596#300 #54#756#365#728é#75é #565#111#261#54 #394 #393#75 é#649#261#233#75#799#860#919#300, #525ù #365#908#799#907#261#393 #365#908#525#54#393 #799 #54#799 #565#111#503#365#300. #32#596#300 #799#919#75#300#72#546#604#75#728#470#300 #522 é#75é #54#261#929#447é#72é#300 #565#521#32#72 #737 #111#393#54 #561#261#300#54 #813#393 #253#126#546#728è#72#300 é#365#114#438#861#651#459#907#261#300, #300#596 #919#503#596ç#522#596#75 #824#393#54 #292#72#525#690#300#75#54 #813#300 #292#111#604#546#75#503#75#233#114#596 #824'#503#72#437#748#300#54. #261#596 #824#393#54 #233#596#75#300#748#149#393#546#522#546#75#54 #799 #33#561#604#292#565é #919#300 #292#521#824#728#32#253 #565#114#261#748 #54#114#261#919#728#651#596#393#72 #340'#459#253#292#521#561#75#503#596#365#393 #813#300 #365#300#75#75#393 #812#546#233#75#812#799#75#728#470#393, #393#546 #253#393#596#75#728#525#546#596#799#546#75 #649#261'#233#111 #365#561#114#51#799#459#75 #33#300#561#253#393#253#393#546#75 #482#32#393 #365#908#799#365#32#596 #292#300#32#75 #365#756#546#75#561#459#860#261#393#561 à #365#908#503#546#447#300#561 #919#393#54 #365#908#861#54#300#54. #393#596 #708#728#546 #813#393 #365#521#253#292#75#300, #812#340 #300#54#75 #365#340#522#728#72 #907#261#393 #596#756#75#561#393 #393#596#956#799#447#393#253#300#596#75 #365#114#438#919#393#365#75#459#708 #393#54#75 #18 #292#521#261#748 #340'#126#149#300#596#728#748 #393#75 #482#32'#32#546#393 #253#861#437#812#919#812#54#503#75#459#756#546 #365#756#596#54#75#604#546#75#393 #393#54#75 #596é#365#393#54#54#799#233#748#393 #292#756#32#561 #708#604#728#72#300 #522#180#503#596#365#300#72 #365#300#54 #459#813é#393#54 #1000 #111#756#748#54 #824'#261#596#300 #799#32#813#728#393#596#365#393 #75#393#546#32#300 #565#861#32#72 #813#233#54#365#32#75#300#561 #813#300#54 #561é#365#393#546#75#393#54 #72é#708#525#561#253#300#54, #261#596 #253#126#596#813#604#75 #522 é#75é #292#561#521#565#525#54é #292#756#261#561 #50 #340#300#54 #340#861#728#54 #521#970#54#861#919è#75#393#54 #907#261#233 #393#546#75#748#503#470#300#596#75 #919#393 #292#561#521#956#561è#54. #438#300#54 #565#604#72#75#233#365#233#292#799#546#75#54 #525#596#75 #393#257#292#561#728#253é #32#546 #813é#54#728#748 #522#748#824#300#596#75 #813#300 #961 #32#596#300 #54#756#365#728é#75é #565#111#261#54 #394 #393#75 é#649#261#233#75#799#860#919#300, #525ù #365#908#799#907#261#393 #365#908#525#54#393 #799 #54#799 #565#111#503#365#300. #32#596#300 #799#919#75#300#72#546#604#75#728#470#300 #522 é#75é #54#261#929#447é#72é#300 #565#521#32#72 #737 #111#393#54 #561#261#300#54 #813#393 #253#126#546#728è#72#300 é#365#114#438#861#651#459#907#261#300, #300#596 #919#503#596ç#522#596#75 #824#393#54 #292#72#525#690#300#75#54 #813#300 #292#111#604#546#75#503#75#233#114#596 #824'#503#72#437#748#300#54. #261#596 #824#393#54 #233#596#75#300#748#149#393#546#522#546#75#54 #799 #33#561#604#292#565é #919#300 #292#521#824#728#32#253 #565#114#261#748 #54#114#261#919#728#651#596#393#72 #340'#459#253#292#521#561#75#503#596#365#393 #813#300 #365#300#75#75#393 #812#546#233#75#812#799#75#728#470#393, #393#546 #253#393#596#75#728#525#546#596#799#546#75 #649#261'#233#111 #365#561#114#51#799#459#75 #33#300#561#253#393#253#393#546#75 #482#32#393 #365#908#799#365#32#596 #292#300#32#75 #365#756#546#75#561#459#860#261#393#561 à #365#908#503#546#447#300#561 #919#393#54 #365#908#861#54#300#54. #393#596 #708#728#546 #813#393 #365#521#253#292#75#300, #812#340 #300#54#75 #365#340#522#728#72 #907#261#393 #596#756#75#561#393 #393#596#956#799#447#393#253#300#596#75 #365#114#438#919#393#365#75#459#708 #393#54#75 #18 #292#521#261#748 #340'#126#149#300#596#728#748 #393#75 #482#32'#32#546#393 #253#861#437#812#919#812#54#503#75#459#756#546 #365#756#596#54#75#604#546#75#393 #393#54#75 #596é#365#393#54#54#799#233#748#393 #292#756#32#561 #708#604#728#72#300 #522#180#503#596#365#300#72 #365#300#54 #459#813é#393#54 #1000" });

           await newDocument.save(); // Await saving the document
        }
        res.status(201).json("Saved 500 texts"); // Send a response with the created document

    } catch (err) {
        res.status(500).send('Server error: ' + err.message);
    }
})

export default router;
